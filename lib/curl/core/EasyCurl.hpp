/*
 *  Copyright 2019 Carnegie Technologies
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#pragma once

#include "basic/MemHandle.hpp"
#include "basic/HashMap.hpp"
#include "error/Error.hpp"

#include "Curl.hpp"

struct curl_slist;

namespace Pravala
{
/// @brief A simple blocking wrapper around easy cURL interface.
/// It does not use events and can be used on different threads.
/// @warning At the moment SSL certificate verification, and verifying whether SSL certificate matches
///          the host is DISABLED (until we have support for configuring it properly).
class EasyCurl: public Curl
{
    public:
        /// @brief If set, the cURL will follow HTTP 3xx redirects.
        static const uint8_t FlagFollowRedirects = ( 1 << 0 );

        /// @brief If set, the data sent (using POST or PUT methods) will be compressed first.
        /// If compression is successful, Content-Encoding will be set to gzip.
        /// Otherwise the body will be sent uncompressed.
        static const uint8_t FlagCompress = ( 1 << 1 );

        const HttpMethod Method; ///< Used HTTP method.
        const String Url; ///< Used URL.

        /// @brief Constructor.
        /// @param [in] url The URL for cURL to use.
        /// @param [in] method The method to use; "GET" by default.
        /// @param [in] flags Flags to control additional behaviours; See Flag*.
        /// @param [in] sendData The data to be sent. If a method that does not upload data is selected (like GET),
        ///                      the data will be ignored.
        /// @param [in] contentType The content type to use ("text/html", "application/json", etc.).
        ///                         Only used when sendData is non-empty.
        EasyCurl (
            const String & url,
            HttpMethod method = MethodGet,
            uint8_t flags = 0,
            const MemHandle & sendData = MemHandle::EmptyHandle,
            const String & contentType = String::EmptyString );

        /// @brief Destructor.
        virtual ~EasyCurl();

        /// @brief Returns the last error message generated by cURL.
        /// @return The last error message generated by cURL.
        inline const String & getLastError() const
        {
            return _errStr;
        }

        /// @brief Checks if cURL has been successfully initialized.
        /// @return True if cURL has been successfully initialized; False otherwise.
        inline bool isInitialized() const
        {
            return ( _curl != 0 );
        }

        /// @brief Configures timeout for cURL operation.
        /// By default there is no timeout.
        /// @param [in] timeout Timeout in seconds, will never timeout if 0.
        /// @return True if the operation succeeded; False otherwise.
        bool setTimeout ( unsigned int timeout );

        /// @brief Adds a header to the list of headers that will be sent by cURL.
        /// @param [in] name The name of the option (for example "Content-Type").
        /// @param [in] value The value of the option (for example "application/json").
        /// @return True if the values were valid (not empty), and appending was successful;
        ///         False otherwise.
        bool appendHeader ( const String & name, const String & value );

        /// @brief Sets the user agent to use for the request.
        /// @param [in] userAgent User agent to set.
        /// @return True if value was set; False otherwise.
        bool setUserAgent ( const String & userAgent );

        /// @brief Sets a username/password pair to use for the request.
        /// @param [in] user Username to set.
        /// @param [in] password Password to set.
        /// @return True if value was set; False otherwise.
        bool setUserPassword ( const String & user, const String & password );

        /// @brief Runs the cURL request.
        /// This method will BLOCK until the request is completed (or it fails).
        /// It should NOT be used on the EventManager's thread (where CurlWrapper should be used instead).
        /// @return Standard error code. getLastError() can also be used to get the description of the error.
        virtual ERRCODE run();

        /// @brief Exposes the HTTP response code of the last operation.
        /// @return HTTP response code of the last operation.
        int getResponseCode() const
        {
            return _respCode;
        }

        // @brief Exposes the payload data received from the server.
        /// It does NOT include the headers.
        /// @return Payload data returned by the server.
        const MemHandle & getRcvdData() const
        {
            return _rcvdData;
        }

        /// @brief Exposes the payload data received from the server.
        /// It does NOT include the headers.
        /// @return Payload data returned by the server.
        MemHandle & getRcvdData()
        {
            return _rcvdData;
        }

        /// @brief Exposes the headers received from the server.
        /// It is a map with header_name:value pairs.
        /// @return Headers received from the server.
        const HashMap<String, String> & getRcvdHeaders() const
        {
            return _rcvdHeaders;
        }

        /// @brief Exposes the headers received from the server.
        /// It is a map with header_name:value pairs.
        /// @return Headers received from the server.
        HashMap<String, String> & getRcvdHeaders()
        {
            return _rcvdHeaders;
        }

    protected:
        void * _curl; ///< Internal cURL object.
        curl_slist * _curlHeaders; ///< The list of cURL headers.

        MemHandle _sendData; ///< The data to send to the server.
        const String _contentType; ///< The content type to use ("text/html", "application/json", etc.)

        MemHandle _rcvdData; ///< The data received from the server.
        HashMap<String, String> _rcvdHeaders; ///< Parsed headers received (header_name:value pairs).

        String _errStr; ///< The last error message generated by cURL.
        int _respCode; ///< The last HTTP response code.

        const uint8_t _flags; ///< Various flags set (see Flag*)

        /// @brief A helper function that checks if cURL operation succeeded.
        /// It's meant to be used as a wrapper around various cURL calls.
        /// On error, it sets the error message based on the error code.
        /// @param [in] curlCode The result of cURL operation (a CURLcode).
        /// @return True if the code described a success; False otherwise.
        bool doCurl ( int curlCode );
};
}
