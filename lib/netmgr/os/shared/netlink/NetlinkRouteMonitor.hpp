/*
 *  Copyright 2019 Carnegie Technologies
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#pragma once

#include "event/EventManager.hpp"
#include "NetlinkAsyncSocket.hpp"
#include "NetlinkRoute.hpp"

namespace Pravala
{
/// @brief Asynchronous Netlink monitor for "route" family operations.
/// It also provides some asynchronous query methods.
class NetlinkRouteMonitor: public NetlinkAsyncSocket
{
    public:
        /// @brief Owner of this NetlinkRouteMonitor
        class Owner
        {
            public:
                /// @brief Called whenever some RouteResults have been received.
                /// @param [in] monitor The monitor that received the data.
                /// @param [in] seqNum The sequence number of the message.
                ///                     Note that if this message was generated by a different Netlink socket,
                ///                     this sequence number will be 0, even if the original data carried a different
                ///                     sequence number.
                /// @param [in] netlinkError The netlink error message carried in the data.
                ///                           It could also carry a 'success' error code.
                ///                           0 means that there was no error message part.
                /// @param [in] routeResults Received route results.
                virtual void netlinkRcvRouteResults (
                    NetlinkRouteMonitor * monitor,
                    uint32_t seqNum, const struct nlmsgerr * netlinkError,
                    NetlinkRoute::RouteResults & routeResults ) = 0;

                /// @brief Called whenever a route-type request fails and is dropped.
                /// This is used for errors while sending data to Netlink socket.
                /// If the NetlinkRouteMonitor is configured NOT to receive multicast updates,
                /// this callback will be used to report all requests failed also while receiving data from the socket.
                /// If the NetlinkRouteMonitor was configured to receive multicast updates, all requests will be
                /// dropped and netlinkRouteMonitorFailed() will be called after experiencing receive errors.
                /// For requests sent properly, which resulted in a Netlink response with an error code,
                /// the actual error data will be delivered using netlinkRcvRouteResults().
                /// @param [in] monitor The monitor that generated the callback.
                /// @param [in] reqSeqNum The sequence number of the request that failed.
                /// @param [in] errorCode The code of the error.
                virtual void netlinkRouteReqFailed (
                    NetlinkRouteMonitor * monitor,
                    uint32_t reqSeqNum, ERRCODE errorCode ) = 0;

                /// @brief Called when there is an error on a socket that is configured to receive multicast updates.
                /// This is called to notify that this socket failed (and has been reinitialized),
                /// but there may be some updates that were lost.
                /// This also means that all pending requests were dropped.
                /// @note This will only be used by NetlinkRouteMonitors configured to receive multicast updates.
                /// @param [in] monitor The monitor that generated the callback.
                virtual void netlinkRouteMonitorFailed ( NetlinkRouteMonitor * monitor ) = 0;

                /// @brief Destructor.
                virtual ~Owner();
        };

        /// @brief Creates a new Socket object with a Netlink socket fd set with parameters
        /// @param [in] owner Owner of this Netlink monitor
        /// @param [in] mcastGroups ORed Bitmask of multicast groups to listen to (default 0 = none)
        ///                         See linux/rtnetlink.h RTMGRP_*
        NetlinkRouteMonitor ( Owner & owner, uint32_t mcastGroups );

        /// @brief Requests a list of all links on the system.
        /// @return Sequence number used for the request.
        uint32_t getLinks();

        /// @brief Requests a list of all addresses on the system.
        /// @param [in] addrType Address type to get (defaults to IPv4 and IPv6 addresses).
        /// Use V4Address to only get IPv4 addresses; likewise V6Address to only get IPv6 addresses.
        /// @return Sequence number of this request.
        uint32_t getAddresses ( IpAddress::AddressType addrType = IpAddress::EmptyAddress );

        /// @brief Requests specified routes.
        /// @param [in] rtTable Routing table number (see /etc/iproute2/rt_tables)
        /// @return Sequence number used for the request.
        uint32_t getRoutes ( uint8_t rtTable = RT_TABLE_MAIN );

    protected:
        virtual void netlinkReceived ( List<NetlinkMessage> & messages );
        virtual void netlinkReqFailed ( uint32_t reqSeqNum, ERRCODE errorCode );
        virtual void netlinkMCastSocketFailed();

    private:
        Owner & _owner; ///< The owner
};
}
