/*
 *  Copyright 2019 Carnegie Technologies
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#pragma once

#include "../FileObject.hpp"

namespace Pravala
{
/// @brief A class that represents an output file for C++ language generators
///
/// It contains sections and helper functions typical to C++ language
///
class CppFile: public FileObject
{
    public:
        /// @brief The type of the include header
        enum IncludeType
        {
            IncludeGlobal = 0, ///< Global include, will be put in '<>'
            IncludeLocal = 1, ///< Regular include to other parts of the system, will use '""'
            IncludeProto = 2, ///< Include to other parts of the autogenerated code
            IncludeOwn = 3, ///< Include to the header file for this implementation file
            IncludeSize = 4 ///< The last valid include type + 1
        };

        /// @brief Constructs a new C++ file object
        ///
        /// @param [in] path A path to the generated file
        /// @param [in] singleIndent A single level of indentation. At each indentation level, the prefix
        ///     added at the beginning of each line will be increased by this value. Should be at least
        ///     one space. Two spaces by default.
        CppFile ( const String & path, const String & singleIndent = "  " );

        /// @brief Sets the current section to 'header'
        ///
        /// This section is at the very beginning of the file, before the namespace section.
        /// It includes comments, 'ifdef', and includes.
        inline void setHeaderSection()
        {
            setSection ( _secHeader );
        }

        /// @brief Sets the current section to 'namespace'
        ///
        /// This section is after 'header' nad before 'body' section
        /// It contains all namespace opening code.
        inline void setNamespaceSection()
        {
            setSection ( _secNamesp );
        }

        /// @brief Sets the current section to 'body'
        ///
        /// This section contains the body of the class generated
        inline void setBodySection()
        {
            setSection ( _secBody );
        }

        /// @brief Sets the current section to 'footer'
        ///
        /// This section follows the body section. It includes all '}' closing
        /// the namespaces, and also 'endif' for 'ifdef' used in the 'header' section.
        inline void setFooterSection()
        {
            setSection ( _secFooter );
        }

        /// @brief Adds a specified include path to the list of C includes
        ///
        /// All C includes are put inside 'extern "C"' block
        ///
        /// @param [in] path The path to include
        /// @param [in] includeType The type of the include
        void addCInclude ( const String & path, IncludeType includeType );

        /// @brief Adds a specified include path to the list of C++ includes
        /// @param [in] path The path to include
        /// @param [in] includeType The type of the include
        void addCppInclude ( const String & path, IncludeType includeType );

        /// @brief Adds both C and C++ includes to the currently used section
        void genIncludes();

        /// @brief Adds "autogenerated, do not edit" comment to the currently used section
        void genAutogenComment();

        /// @brief Finalizes the file
        /// This function can make any modifications or adjustments of the content of the file
        /// just before the file is written to disk.
        virtual void finalizeFile();

        /// @brief Adds a doxygen comment line followed by the value passed
        /// @param [in] value The actual comment
        /// @return reference to this FileObject (for chaining)
        virtual FileObject & c ( const String & value );

    private:
        int _secHeader; ///< The ID of the 'header' section
        int _secNamesp; ///< The ID of the 'namespace' section
        int _secBody; ///< The ID of the 'body' section
        int _secFooter; ///< The ID of the 'footer' section

        HashMap<String, IncludeType> _cIncludes; ///< Contains all C includes
        HashMap<String, IncludeType> _cppIncludes; ///< Contains all C++ includes
};
}
